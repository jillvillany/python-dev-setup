{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Overview \u00b6 This repo has instructions on how to install/use all the recommended tools to establish the ultimate python developer setup. Click into each section on the right for information on how to: Run Scripts from Command Line - Mac Terminal/ Windows WSL Section Content test [1. Run Scripts from Command Line - Mac Terminal/ Windows WSL](../docs/run_scripts_cmd_line.md) Windows Users: Install/ Configure WSL Format your terminal 2. Version Control Your Code - Git Installation SSH Configuration Useful Commands Script automations: archive_branch.sh sync_git_branches.sh 3. Edit and Debug Your Code - VS Code Install VS Code and Key Extensions Use VSCode with WSL Configure Remote-SSH Editing 4. Manage Your Python Version - Mambaforge Install Mambaforge Useful Mambaforge commands 5. Manage Your Python Package Versions - Poetry Install Poetry Use Poetry To Install Project Dependencies Useful Poetry commands","title":"Home"},{"location":"#overview","text":"This repo has instructions on how to install/use all the recommended tools to establish the ultimate python developer setup. Click into each section on the right for information on how to: Run Scripts from Command Line - Mac Terminal/ Windows WSL Section Content test [1. Run Scripts from Command Line - Mac Terminal/ Windows WSL](../docs/run_scripts_cmd_line.md) Windows Users: Install/ Configure WSL Format your terminal 2. Version Control Your Code - Git Installation SSH Configuration Useful Commands Script automations: archive_branch.sh sync_git_branches.sh 3. Edit and Debug Your Code - VS Code Install VS Code and Key Extensions Use VSCode with WSL Configure Remote-SSH Editing 4. Manage Your Python Version - Mambaforge Install Mambaforge Useful Mambaforge commands 5. Manage Your Python Package Versions - Poetry Install Poetry Use Poetry To Install Project Dependencies Useful Poetry commands","title":"Overview"},{"location":"git_version_control/","text":"Git Install \u00b6 Mac \u00b6 Install Apple Xcode developer tools xcode-select --install Download Homebrew: https://brew.sh/ Homebrew helps you easily manage installs on a Mac from command-line Install git using homebrew brew install git Windows \u00b6 From PowerShell, open your Ubuntu Linux distribution with wsl and run the command apt install git NOTE: If you forgot your password (or were not prompted to set one upon initial WSL install), you can reset your password using the following steps: Exit the Linux distribution you are in with the command exit Re-enter the Linux distribution as the root user wsl -u root Enter the command passwd {your username} and type in the new password NOTE: your username is what you saw in the command prompt when you weren't at the root Exit the Linux Distribution with exit Red Hat Linux \u00b6 Switch to the super user (a.k.a root user) sudo su Enter your password Install git yum install git Switch back to a normal user exit Set Git Username and Email \u00b6 In order to commit/ push code to Git you must configure your username and email. git config --global user.name {your username} git config --global user.email {your email} Configure SSH Auth \u00b6 To easily authenticate with Github/ Bitbucket (i.e. not need to enter your username/ password every time you pull/push to the repo) you can set up SSH authentication. Setting up git authentication on a personal machine (i.e. one that only you will be using) is very simple. However, if multiple user may be using the machine (i.e. a Linux Machine shared by a development team) you will want to follow a few additional step so that commits can be distinguished by user. Personal Machine SSH Auth \u00b6 Create an SSH key pair with the command ssh-keygen and press enter to accept all the default Copy the content of the id_rsa.pub file using the cat {path to your file} command For example, cat ~/.ssh/id_rsa.pub See the Machine Type Agnostic Steps section for remaining steps Shared Machine SSH Auth \u00b6 Create an SSH key pair with the command ssh-keygen , adding your git profile to the end of the id_rsa file name instead of accepting all default For example: Users/jillvillany/.ssh/id_rsa_jillvillany Navigate to where the ssh key pair was created using the cd {path to ssh folder} command For example: cd Users/jillvillany/.ssh Create the config file touch config vim config NOTE: Git username vairable is case sensitive If using Github, add the below to your config file: Host github-{git username} HostName github.com IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes If using Github Enterprise (i.e. IBM), add the below to yuur config file: Host github-{git username} HostName github.ibm.com IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes If Bitbucket: Host bitbucket.org-{git username} HostName bitbucket.org User git IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes NOTE: If you have other users to add, create similar entries below in the file Copy the contents of the id_rsa_{git username}.pub file using the cat id_rsa_{git username}.pub command Machine Type Agnostic Steps \u00b6 Add SSH key in Github or Bitbucket In Github: Navigate to Settings > SSH and GPG keys Click New SSH key and add the contents of your id_rsa_{git username}.pub file in the key field In Bitbucket: Navigate to personal settings Select SSH Key > Add Key add the contents of your id_rsa_{git username}.pub file in the key field Add the SSH key to the SSH agent ssh-add ~/.ssh/id_rsa_{git username} NOTE: if you get an error about connecting to the ssh agent, you need to start the agent in the background with \"eval `ssh-agent`\" Test your SSH connection If on a personal machine: Github: ssh -T git@github.com Github Enterprise (i.e. IBM): ssh -T git@github.ibm.com Bitbucket: ssh -T git@bitbucket.org If on a shared machine: Github: ssh -T git@github-{your username} Github Enterprise (i.e. IBM): ssh -T git@github.ibm-{your username} Bitbucket: ssh -T git@bitbucket.org-{your username} Useful Git Commands \u00b6 Description Commands Notes Clone repo with SSH auth On a new repo Select SSH when you clone the code and copy the URL Enter the command git clone {SSH URL} For example: git clone git@github.com:jillvillany/python-dev-setup.git On an existing git repo (i.e. if had cloned this repo using username and password auth) Set the remote URL to the URL used with ssh git remote set-url origin {SSH URL} Now try git push Answer yes to the prompt and you will see git connects/ shows everything up to date without prompting for username/ password IMP NOTE: If you are an SSH config file so multiple git users can be on the same machine (i.e. as done in instructions above), you must modify the SSH URL git provides For example, in git@github.com:jillvillany/python-dev-setup.git replace .com with -{username} -> git@github-jillvillany:jillvillany/python-dev-setup.git Clone repo with SSH auth IMP NOTE : If you are an SSH config file so multiple git users can be on the same machine (i.e. as done in instructions above), you must modify the SSH URL git provides For example, in git@github.com:jillvillany/python-dev-setup.git replace \".com\" with \"-{username}\" -> git@github-jillvillany:jillvillany/python-dev-setup.git On a new repo: Select SSH when you clone the code and copy the URL Enter the command git clone {SSH URL} For example: git clone git@github.com:jillvillany/python-dev-setup.git On an existing git repo (i.e. if had cloned this repo using username and password auth) Set the remote URL to the URL used with ssh git remote set-url origin {SSH URL} Now try git push Answer yes to the prompt and you will see git connects/ shows everything up to date without prompting for username/ password Add new/ modified files, commit and push changes git pull git add {relative file path} git commit -m \"commit message\" git push IMPORTANT: If multiple users are working in the directory, be sure to set the git config user.email before pushing so that commits belong to the user that made the change git config user.email {your email} Undo all local changes to the checked out branch git stash Undo local changes to a particular file git checkout --{file name} Create a New Branch git checkout -b {branch name} {branch making new branch from} git push -u origin {branch name} Abort a merge git merge --abort Revert to a previous commit git revert {commit hash} NOTE: See this stack overflow post for more details Archive & Delete a Branch git tag archive/{branchname} {branchname} git push origin --tags git branch -d {branchname} git push -d origin {branch_name} NOTE: If need to delete a created tag git tag -d NOTE: The process of archiving numerous branches can get tedious. See the archive_branch.sh script in this repo for an automated way to archive branches. Restore an archived branch git checkout -b {branch name} archive/{archived branch name} Maintain a Forked Repo Sync your forked version of the repo with the most updated version of the main repo git checkout master If not already done: git remote add upstream {ssh url} git fetch upstream git rebase upstream/master git push -u origin For other useful commands delivered in an entertaining way see: https://ohshitgit.com/","title":"2. Version Control Your Code"},{"location":"git_version_control/#git-install","text":"","title":"Git Install"},{"location":"git_version_control/#mac","text":"Install Apple Xcode developer tools xcode-select --install Download Homebrew: https://brew.sh/ Homebrew helps you easily manage installs on a Mac from command-line Install git using homebrew brew install git","title":"Mac"},{"location":"git_version_control/#windows","text":"From PowerShell, open your Ubuntu Linux distribution with wsl and run the command apt install git NOTE: If you forgot your password (or were not prompted to set one upon initial WSL install), you can reset your password using the following steps: Exit the Linux distribution you are in with the command exit Re-enter the Linux distribution as the root user wsl -u root Enter the command passwd {your username} and type in the new password NOTE: your username is what you saw in the command prompt when you weren't at the root Exit the Linux Distribution with exit","title":"Windows"},{"location":"git_version_control/#red-hat-linux","text":"Switch to the super user (a.k.a root user) sudo su Enter your password Install git yum install git Switch back to a normal user exit","title":"Red Hat Linux"},{"location":"git_version_control/#set-git-username-and-email","text":"In order to commit/ push code to Git you must configure your username and email. git config --global user.name {your username} git config --global user.email {your email}","title":"Set Git Username and Email"},{"location":"git_version_control/#configure-ssh-auth","text":"To easily authenticate with Github/ Bitbucket (i.e. not need to enter your username/ password every time you pull/push to the repo) you can set up SSH authentication. Setting up git authentication on a personal machine (i.e. one that only you will be using) is very simple. However, if multiple user may be using the machine (i.e. a Linux Machine shared by a development team) you will want to follow a few additional step so that commits can be distinguished by user.","title":"Configure SSH Auth"},{"location":"git_version_control/#personal-machine-ssh-auth","text":"Create an SSH key pair with the command ssh-keygen and press enter to accept all the default Copy the content of the id_rsa.pub file using the cat {path to your file} command For example, cat ~/.ssh/id_rsa.pub See the Machine Type Agnostic Steps section for remaining steps","title":"Personal Machine SSH Auth"},{"location":"git_version_control/#shared-machine-ssh-auth","text":"Create an SSH key pair with the command ssh-keygen , adding your git profile to the end of the id_rsa file name instead of accepting all default For example: Users/jillvillany/.ssh/id_rsa_jillvillany Navigate to where the ssh key pair was created using the cd {path to ssh folder} command For example: cd Users/jillvillany/.ssh Create the config file touch config vim config NOTE: Git username vairable is case sensitive If using Github, add the below to your config file: Host github-{git username} HostName github.com IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes If using Github Enterprise (i.e. IBM), add the below to yuur config file: Host github-{git username} HostName github.ibm.com IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes If Bitbucket: Host bitbucket.org-{git username} HostName bitbucket.org User git IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes NOTE: If you have other users to add, create similar entries below in the file Copy the contents of the id_rsa_{git username}.pub file using the cat id_rsa_{git username}.pub command","title":"Shared Machine SSH Auth"},{"location":"git_version_control/#machine-type-agnostic-steps","text":"Add SSH key in Github or Bitbucket In Github: Navigate to Settings > SSH and GPG keys Click New SSH key and add the contents of your id_rsa_{git username}.pub file in the key field In Bitbucket: Navigate to personal settings Select SSH Key > Add Key add the contents of your id_rsa_{git username}.pub file in the key field Add the SSH key to the SSH agent ssh-add ~/.ssh/id_rsa_{git username} NOTE: if you get an error about connecting to the ssh agent, you need to start the agent in the background with \"eval `ssh-agent`\" Test your SSH connection If on a personal machine: Github: ssh -T git@github.com Github Enterprise (i.e. IBM): ssh -T git@github.ibm.com Bitbucket: ssh -T git@bitbucket.org If on a shared machine: Github: ssh -T git@github-{your username} Github Enterprise (i.e. IBM): ssh -T git@github.ibm-{your username} Bitbucket: ssh -T git@bitbucket.org-{your username}","title":"Machine Type Agnostic Steps"},{"location":"git_version_control/#useful-git-commands","text":"Description Commands Notes Clone repo with SSH auth On a new repo Select SSH when you clone the code and copy the URL Enter the command git clone {SSH URL} For example: git clone git@github.com:jillvillany/python-dev-setup.git On an existing git repo (i.e. if had cloned this repo using username and password auth) Set the remote URL to the URL used with ssh git remote set-url origin {SSH URL} Now try git push Answer yes to the prompt and you will see git connects/ shows everything up to date without prompting for username/ password IMP NOTE: If you are an SSH config file so multiple git users can be on the same machine (i.e. as done in instructions above), you must modify the SSH URL git provides For example, in git@github.com:jillvillany/python-dev-setup.git replace .com with -{username} -> git@github-jillvillany:jillvillany/python-dev-setup.git Clone repo with SSH auth IMP NOTE : If you are an SSH config file so multiple git users can be on the same machine (i.e. as done in instructions above), you must modify the SSH URL git provides For example, in git@github.com:jillvillany/python-dev-setup.git replace \".com\" with \"-{username}\" -> git@github-jillvillany:jillvillany/python-dev-setup.git On a new repo: Select SSH when you clone the code and copy the URL Enter the command git clone {SSH URL} For example: git clone git@github.com:jillvillany/python-dev-setup.git On an existing git repo (i.e. if had cloned this repo using username and password auth) Set the remote URL to the URL used with ssh git remote set-url origin {SSH URL} Now try git push Answer yes to the prompt and you will see git connects/ shows everything up to date without prompting for username/ password Add new/ modified files, commit and push changes git pull git add {relative file path} git commit -m \"commit message\" git push IMPORTANT: If multiple users are working in the directory, be sure to set the git config user.email before pushing so that commits belong to the user that made the change git config user.email {your email} Undo all local changes to the checked out branch git stash Undo local changes to a particular file git checkout --{file name} Create a New Branch git checkout -b {branch name} {branch making new branch from} git push -u origin {branch name} Abort a merge git merge --abort Revert to a previous commit git revert {commit hash} NOTE: See this stack overflow post for more details Archive & Delete a Branch git tag archive/{branchname} {branchname} git push origin --tags git branch -d {branchname} git push -d origin {branch_name} NOTE: If need to delete a created tag git tag -d NOTE: The process of archiving numerous branches can get tedious. See the archive_branch.sh script in this repo for an automated way to archive branches. Restore an archived branch git checkout -b {branch name} archive/{archived branch name} Maintain a Forked Repo Sync your forked version of the repo with the most updated version of the main repo git checkout master If not already done: git remote add upstream {ssh url} git fetch upstream git rebase upstream/master git push -u origin For other useful commands delivered in an entertaining way see: https://ohshitgit.com/","title":"Useful Git Commands"},{"location":"old/","text":"python-dev-setup \u00b6 2. Version Control Your Code - Git \u00b6 3. Edit and Debug Your Code - Vscode \u00b6 Back to Table of Contents Install VS Code and Key Extensions \u00b6 Download Vscode: https://code.visualstudio.com/download Install the extensions below: Python Extension ID: ms-python.python Jupyter Extension ID: ms-toolsai.jupyter Prettify JSON Extension ID: mohsen1.prettify-json JSON Viewer Extension ID: ccimage.jsonviewer Markdown Preview Enhanced Extension ID: shd101wyy.markdown-preview-enhanced Rainbow CSV Extension ID: mechatroner.rainbow-csv vscode-pdf Extension ID: tomoki1207.pdf Remote-SSH Extension ID: ms-vscode-remote.remote-ssh Remote-WSL (only if using Windows WSL) Extension ID: ms-vscode-remote.remote-wsl Use VSCode with WSL \u00b6 Back to Table of Contents Once you install tyhe Remote-WSL, navigate to the Remote Explorer tab and connect to your WSL distribution Navigate to open a folder as you normally would Configure Remote-SSH Editing \u00b6 Back to Table of Contents When project files are hosted on a Linux Machine, you can easily edit/ debug them as you would local files by taking advantage of VS Code's Remote-SSH extension. To use SSH to connect to a remote Linux machine: Open the Command Palette Mac: shift + cmd + P Windows: shift + ctrl + P Search for/ Select Remote-SSH: Add New SSH Host... Enter the ssh connection command ssh {username}@{ip} Select the ssh file to update You will see a pop-up in the bottom right corner that the host has been added In the Remote Explorer tab, you will now see your new SSH Target. Click the plus folder icon to \"Connect to Host in New Window\" A new window will open and you will be prompted to enter your password Choose the folder in the remote machine you want to open and select \"OK\" You will be prompted for your password one more time Upon successful connection, you will see the remote machine's ip as well as the git branch you are currently on (if opened to a git repo) in the bottom left corner You can now easily edit and debug your code as you would locally. However, there is one exception. If you are connecting to the remote machine with a normal user (i.e. non-root user) you will get access errors when trying to run a ipynb file. This happens because, in a Unix/Linux system, you can\u2019t bind to external facing ports without super user/root access. If you do not have an environment controlled with Puppet, you can try editing the user's permissions to not need password authentication when entering root user mode. However, it is easiest to just test small code snippets in a noteboook file locally. For more information, see https://code.visualstudio.com/docs/remote/ssh 4. Manage Your Python Version - Mambaforge \u00b6 Back to Table of Contents Mac Mambaforge Install \u00b6 Back to Table of Contents Install wget brew install wget Install Mambaforge (Type \"yes\" wherever asked) wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge- $( uname ) - $( uname -m ) .sh\" bash Mambaforge- $( uname ) - $( uname -m ) .sh Windows WSL/ Linux Mambaforge Install \u00b6 Back to Table of Contents Install wget sudo apt install wget Install Mambaforge (Type \"yes\" wherever asked) ```bash wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh\" bash Mambaforge-$(uname)-$(uname -m).sh source ~/.bashrc Useful Mambaforge Commands \u00b6 Back to Table of Contents Create new conda python virtual environment Note: If it asks you to select y/n, enter \"y\" conda create -n { name } python ={ version } Activate conda environment conda activate { name } Deactivate conda environment conda deactivate 5. Manage Your Python Package Versions - Poetry \u00b6 Back to Table of Contents Install Poetry \u00b6 Install poetry with the following command: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - Restart your terminal Enter poetry and you should see a list of commands returned Use Poetry To Install Project Dependencies \u00b6 Back to Table of Contents NOTE: For demo purposes, let's pretend this project is dependent on Python version 3.9.6 and pandas Create a pyproject.toml file using the following template (See this repo's pyproject.toml ): NOTE: We are assuming this repo represents a project dependent on Python version 3.9.6 and a pandas version greater than or equal to 1.4.1 [tool.poetry] name = \"{repo/project name}\" version = \"1.0.0\" description = \"{free text description}\" readme = \"README.md\" repository = \"{git repo link}\" documentation = \"{site url if applicable}\" authors = [ \"{full name} <{email}>\" ] [tool.poetry.dependencies] python = \"=={Python version}\" [tool.poetry.dev-dependencies] [build-system] requires = [\"poetry-core>=1.0.0\"] build-backend = \"poetry.core.masonry.api\" Create a conda environment that uses the Python version specified in the pyproject.toml file and active the environment conda create -n python-dev-setup python=3.9.6 Run command poetry install NOTE: You will see a poetry.lock file created. This is important to be committed to your repo so that other team members can install the dependencies from the lock file by running poetry install Useful Poetry Commands \u00b6 Back to Table of Contents Install the requirements in the poetry.lock file poetry install Add a package to the pyproject.toml file and update lock file poetry add {package name} NOTE1: This will install the latest package version. The pyproject.toml will show a version greater than or equal to the version is required and the poetry.lock file will update to specify the specific version installed. NOTE2: If you need to install a version other than the latest version, you can specify poetry add {package name}=={version} Remove a package from the pyproject.toml file and update lock file poetry remove {package name}","title":"python-dev-setup"},{"location":"old/#python-dev-setup","text":"","title":"python-dev-setup"},{"location":"old/#2-version-control-your-code-git","text":"","title":"2. Version Control Your Code - Git"},{"location":"old/#3-edit-and-debug-your-code-vscode","text":"Back to Table of Contents","title":"3. Edit and Debug Your Code - Vscode"},{"location":"old/#install-vs-code-and-key-extensions","text":"Download Vscode: https://code.visualstudio.com/download Install the extensions below: Python Extension ID: ms-python.python Jupyter Extension ID: ms-toolsai.jupyter Prettify JSON Extension ID: mohsen1.prettify-json JSON Viewer Extension ID: ccimage.jsonviewer Markdown Preview Enhanced Extension ID: shd101wyy.markdown-preview-enhanced Rainbow CSV Extension ID: mechatroner.rainbow-csv vscode-pdf Extension ID: tomoki1207.pdf Remote-SSH Extension ID: ms-vscode-remote.remote-ssh Remote-WSL (only if using Windows WSL) Extension ID: ms-vscode-remote.remote-wsl","title":"Install VS Code and Key Extensions"},{"location":"old/#use-vscode-with-wsl","text":"Back to Table of Contents Once you install tyhe Remote-WSL, navigate to the Remote Explorer tab and connect to your WSL distribution Navigate to open a folder as you normally would","title":"Use VSCode with WSL"},{"location":"old/#configure-remote-ssh-editing","text":"Back to Table of Contents When project files are hosted on a Linux Machine, you can easily edit/ debug them as you would local files by taking advantage of VS Code's Remote-SSH extension. To use SSH to connect to a remote Linux machine: Open the Command Palette Mac: shift + cmd + P Windows: shift + ctrl + P Search for/ Select Remote-SSH: Add New SSH Host... Enter the ssh connection command ssh {username}@{ip} Select the ssh file to update You will see a pop-up in the bottom right corner that the host has been added In the Remote Explorer tab, you will now see your new SSH Target. Click the plus folder icon to \"Connect to Host in New Window\" A new window will open and you will be prompted to enter your password Choose the folder in the remote machine you want to open and select \"OK\" You will be prompted for your password one more time Upon successful connection, you will see the remote machine's ip as well as the git branch you are currently on (if opened to a git repo) in the bottom left corner You can now easily edit and debug your code as you would locally. However, there is one exception. If you are connecting to the remote machine with a normal user (i.e. non-root user) you will get access errors when trying to run a ipynb file. This happens because, in a Unix/Linux system, you can\u2019t bind to external facing ports without super user/root access. If you do not have an environment controlled with Puppet, you can try editing the user's permissions to not need password authentication when entering root user mode. However, it is easiest to just test small code snippets in a noteboook file locally. For more information, see https://code.visualstudio.com/docs/remote/ssh","title":"Configure Remote-SSH Editing"},{"location":"old/#4-manage-your-python-version-mambaforge","text":"Back to Table of Contents","title":"4. Manage Your Python Version - Mambaforge"},{"location":"old/#mac-mambaforge-install","text":"Back to Table of Contents Install wget brew install wget Install Mambaforge (Type \"yes\" wherever asked) wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge- $( uname ) - $( uname -m ) .sh\" bash Mambaforge- $( uname ) - $( uname -m ) .sh","title":"Mac Mambaforge Install"},{"location":"old/#windows-wsl-linux-mambaforge-install","text":"Back to Table of Contents Install wget sudo apt install wget Install Mambaforge (Type \"yes\" wherever asked) ```bash wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh\" bash Mambaforge-$(uname)-$(uname -m).sh source ~/.bashrc","title":"Windows WSL/ Linux Mambaforge Install"},{"location":"old/#useful-mambaforge-commands","text":"Back to Table of Contents Create new conda python virtual environment Note: If it asks you to select y/n, enter \"y\" conda create -n { name } python ={ version } Activate conda environment conda activate { name } Deactivate conda environment conda deactivate","title":"Useful Mambaforge Commands"},{"location":"old/#5-manage-your-python-package-versions-poetry","text":"Back to Table of Contents","title":"5. Manage Your Python Package Versions - Poetry"},{"location":"old/#install-poetry","text":"Install poetry with the following command: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - Restart your terminal Enter poetry and you should see a list of commands returned","title":"Install Poetry"},{"location":"old/#use-poetry-to-install-project-dependencies","text":"Back to Table of Contents NOTE: For demo purposes, let's pretend this project is dependent on Python version 3.9.6 and pandas Create a pyproject.toml file using the following template (See this repo's pyproject.toml ): NOTE: We are assuming this repo represents a project dependent on Python version 3.9.6 and a pandas version greater than or equal to 1.4.1 [tool.poetry] name = \"{repo/project name}\" version = \"1.0.0\" description = \"{free text description}\" readme = \"README.md\" repository = \"{git repo link}\" documentation = \"{site url if applicable}\" authors = [ \"{full name} <{email}>\" ] [tool.poetry.dependencies] python = \"=={Python version}\" [tool.poetry.dev-dependencies] [build-system] requires = [\"poetry-core>=1.0.0\"] build-backend = \"poetry.core.masonry.api\" Create a conda environment that uses the Python version specified in the pyproject.toml file and active the environment conda create -n python-dev-setup python=3.9.6 Run command poetry install NOTE: You will see a poetry.lock file created. This is important to be committed to your repo so that other team members can install the dependencies from the lock file by running poetry install","title":"Use Poetry To Install Project Dependencies"},{"location":"old/#useful-poetry-commands","text":"Back to Table of Contents Install the requirements in the poetry.lock file poetry install Add a package to the pyproject.toml file and update lock file poetry add {package name} NOTE1: This will install the latest package version. The pyproject.toml will show a version greater than or equal to the version is required and the poetry.lock file will update to specify the specific version installed. NOTE2: If you need to install a version other than the latest version, you can specify poetry add {package name}=={version} Remove a package from the pyproject.toml file and update lock file poetry remove {package name}","title":"Useful Poetry Commands"},{"location":"run_scripts_cmd_line/","text":"Mac \u00b6 Mac's Terminal app is ideal for this because Mac has a Linux based OS and most apps are deployed to Linux machines in Production due to their cost effectiveness. Since Window's is not a Linux based OS, you can set up a Linux virtual environment with WSL. Windows \u00b6 Set Up a WSL Environment \u00b6 WSL Article Reference NOTE: If you already have a legacy version of WSL installed (i.e. WSL1 instead of WSL2), uninstall it so you can follow the install steps below Run Windows PowerShell as an administrator and select yes to the prompt asking if you want to allow the app to make changes to your device Run the command wsl --install This will take a few minutes, but on successful complete, you should see the below output Restart your computer When you log back in, you will now see an Ubunutu terminal loaded Close out of the Ubuntu window, and open PowerShell Run the command wsl -l -v to list your installed Linux DIstributions and you should see something like the following NOTE: The star next to the Ubuntu-20.40 distribution means this is the default distribution that will be used when launching WSL To launch your default Linux distribution from PowerShell, simply run the command wsl Format Your Terminal \u00b6 No matter the command line interface (CLI) used, it helps to format your CLI to work well with Git so that you know what branch you are working on and don't accidentally commit code to the wrong branch. NOTE: Code below found in this Medium article Open your terminal of choice (i.e. Mac users default terminal/ Windows users WSL) Cd to your home directory cd ~ Create .bash_profile file if it doesn't already exist touch .bash_profile Open .bash_profile Mac: open .bash_profile WSL: vim .bash_profile Add this line to the bottom of the file source ~/.bash_prompt NOTE: In vim, type i to enter INSERT mode and then right click to paster the copied text. Press esc to exit INSERT mode. Type :wq and press enter to save and close the file. Create .bash_prompt file touch .bash_prompt Open .bash_prompt file Mac: open .bash_prompt Windows: notepad .bash_prompt Add these lines to your file #!/usr/bin/env bash # GIT FUNCTIONS git_branch() { git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \\\\(.*$ \\\\(.*\\\\)/ (\\\\1)/' } # TERMINAL PROMPT PS1=\"\\[\\e[0;93m\\]\\u\\[\\e[m\\]\" # username PS1+=\" \" # space PS1+=\"\\[\\e[0;95m\\]\\W\\[\\e[m\\]\" # current directory PS1+=\" \" # space PS1+=\"\\[\\e[0;92m\\]\\$(git_branch)\\[\\e[m\\]\" # current branch PS1+=\" \" # space PS1+=\">> \" # end prompt export PS1; export CLICOLOR=1 export LSCOLORS=ExFxBxDxCxegedabagacad Relaunch you terminal and navigate to a git repo (i.e. this python-dev-setup repo). You will now see your terminal prompt formatted with your username, current folder and repo branch Mac: WSL:","title":"1. Run Scripts from Command Line"},{"location":"run_scripts_cmd_line/#mac","text":"Mac's Terminal app is ideal for this because Mac has a Linux based OS and most apps are deployed to Linux machines in Production due to their cost effectiveness. Since Window's is not a Linux based OS, you can set up a Linux virtual environment with WSL.","title":"Mac"},{"location":"run_scripts_cmd_line/#windows","text":"","title":"Windows"},{"location":"run_scripts_cmd_line/#set-up-a-wsl-environment","text":"WSL Article Reference NOTE: If you already have a legacy version of WSL installed (i.e. WSL1 instead of WSL2), uninstall it so you can follow the install steps below Run Windows PowerShell as an administrator and select yes to the prompt asking if you want to allow the app to make changes to your device Run the command wsl --install This will take a few minutes, but on successful complete, you should see the below output Restart your computer When you log back in, you will now see an Ubunutu terminal loaded Close out of the Ubuntu window, and open PowerShell Run the command wsl -l -v to list your installed Linux DIstributions and you should see something like the following NOTE: The star next to the Ubuntu-20.40 distribution means this is the default distribution that will be used when launching WSL To launch your default Linux distribution from PowerShell, simply run the command wsl","title":"Set Up a WSL Environment"},{"location":"run_scripts_cmd_line/#format-your-terminal","text":"No matter the command line interface (CLI) used, it helps to format your CLI to work well with Git so that you know what branch you are working on and don't accidentally commit code to the wrong branch. NOTE: Code below found in this Medium article Open your terminal of choice (i.e. Mac users default terminal/ Windows users WSL) Cd to your home directory cd ~ Create .bash_profile file if it doesn't already exist touch .bash_profile Open .bash_profile Mac: open .bash_profile WSL: vim .bash_profile Add this line to the bottom of the file source ~/.bash_prompt NOTE: In vim, type i to enter INSERT mode and then right click to paster the copied text. Press esc to exit INSERT mode. Type :wq and press enter to save and close the file. Create .bash_prompt file touch .bash_prompt Open .bash_prompt file Mac: open .bash_prompt Windows: notepad .bash_prompt Add these lines to your file #!/usr/bin/env bash # GIT FUNCTIONS git_branch() { git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \\\\(.*$ \\\\(.*\\\\)/ (\\\\1)/' } # TERMINAL PROMPT PS1=\"\\[\\e[0;93m\\]\\u\\[\\e[m\\]\" # username PS1+=\" \" # space PS1+=\"\\[\\e[0;95m\\]\\W\\[\\e[m\\]\" # current directory PS1+=\" \" # space PS1+=\"\\[\\e[0;92m\\]\\$(git_branch)\\[\\e[m\\]\" # current branch PS1+=\" \" # space PS1+=\">> \" # end prompt export PS1; export CLICOLOR=1 export LSCOLORS=ExFxBxDxCxegedabagacad Relaunch you terminal and navigate to a git repo (i.e. this python-dev-setup repo). You will now see your terminal prompt formatted with your username, current folder and repo branch Mac: WSL:","title":"Format Your Terminal"}]}