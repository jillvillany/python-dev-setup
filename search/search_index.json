{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Table of Contents \u00b6 Task Recommended Tool Content 1. Run Scripts from Command Line Mac Users: Terminal Windows Users: WSL Windows Users: Install/ Configure WSL Format your terminal 2. Version Control Your Code Git Install Configure SSH Auth Useful Commands Git Diff Excel Workaround Script automations: archive_branch.sh sync_git_branches.sh 3. Edit and Debug Your Code VS Code Install Use VSCode with WSL Configure Remote-SSH Editing 4. Manage Your Python Version Mambaforge Install Useful Mambaforge commands 5. Manage Your Python Package Versions Poetry Install Use Poetry To Install Project Dependencies Useful Poetry commands Overview \u00b6 To have a good environment setup, you must have tools to efficiently perform the following 5 tasks: Run scripts from command line Version control your code Edit and debug your code Manage the Python version you use to run your code Manage the Python package versions you use to run your code A good environment setup is key to many things including: Team collaboration Production Readiness Time saving In this site, tool recommendations, install/ configuration instructions and common commands are provided to ensure you can easily create a setup you'll love. For more details see the following Medium Article: Fall in Love with Your Environment Setup A Python developer\u2019s guide to the optimal setup for collaboration, production readiness and time saving","title":"Home"},{"location":"#table-of-contents","text":"Task Recommended Tool Content 1. Run Scripts from Command Line Mac Users: Terminal Windows Users: WSL Windows Users: Install/ Configure WSL Format your terminal 2. Version Control Your Code Git Install Configure SSH Auth Useful Commands Git Diff Excel Workaround Script automations: archive_branch.sh sync_git_branches.sh 3. Edit and Debug Your Code VS Code Install Use VSCode with WSL Configure Remote-SSH Editing 4. Manage Your Python Version Mambaforge Install Useful Mambaforge commands 5. Manage Your Python Package Versions Poetry Install Use Poetry To Install Project Dependencies Useful Poetry commands","title":"Table of Contents"},{"location":"#overview","text":"To have a good environment setup, you must have tools to efficiently perform the following 5 tasks: Run scripts from command line Version control your code Edit and debug your code Manage the Python version you use to run your code Manage the Python package versions you use to run your code A good environment setup is key to many things including: Team collaboration Production Readiness Time saving In this site, tool recommendations, install/ configuration instructions and common commands are provided to ensure you can easily create a setup you'll love. For more details see the following Medium Article: Fall in Love with Your Environment Setup A Python developer\u2019s guide to the optimal setup for collaboration, production readiness and time saving","title":"Overview"},{"location":"1-run_scripts_cmd_line/","text":"Mac \u00b6 Mac's Terminal app is ideal for this because Mac has a Linux based OS and most apps are deployed to Linux machines in Production due to their cost effectiveness. Windows \u00b6 Since Window's is not a Linux based OS, you can set up a Linux virtual environment with WSL. Set Up a WSL Environment \u00b6 WSL Article Reference NOTE: If you already have a legacy version of WSL installed (i.e. WSL1 instead of WSL2), uninstall it so you can follow the install steps below Run Windows PowerShell as an administrator and select yes to the prompt asking if you want to allow the app to make changes to your device Run the command wsl --install This will take a few minutes, but on successful complete, you should see the below output Restart your computer When you log back in, you will now see an Ubunutu terminal loaded Close out of the Ubuntu window, and open PowerShell Run the command wsl -l -v to list your installed Linux DIstributions and you should see something like the following NOTE: The star next to the Ubuntu-20.40 distribution means this is the default distribution that will be used when launching WSL To launch your default Linux distribution from PowerShell, simply run the command wsl Format Your Terminal \u00b6 No matter the command line interface (CLI) used, it helps to format your CLI to work well with Git so that you know what branch you are working on and don't accidentally commit code to the wrong branch. NOTE: Code below found in this Medium article Open your terminal of choice (i.e. Mac users default terminal/ Windows users WSL) Cd to your home directory cd ~ Create .bash_profile file if it doesn't already exist touch .bash_profile Open .bash_profile Mac: open .bash_profile WSL: vim .bash_profile Add this line to the bottom of the file source ~/.bash_prompt NOTE: In vim, type i to enter INSERT mode and then right click to paster the copied text. Press esc to exit INSERT mode. Type :wq and press enter to save and close the file. Create .bash_prompt file touch .bash_prompt Open .bash_prompt file Mac: open .bash_prompt Windows: notepad .bash_prompt Add these lines to your file #!/usr/bin/env bash # GIT FUNCTIONS git_branch() { git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \\\\(.*$ \\\\(.*\\\\)/ (\\\\1)/' } # TERMINAL PROMPT PS1=\"\\[\\e[0;93m\\]\\u\\[\\e[m\\]\" # username PS1+=\" \" # space PS1+=\"\\[\\e[0;95m\\]\\W\\[\\e[m\\]\" # current directory PS1+=\" \" # space PS1+=\"\\[\\e[0;92m\\]\\$(git_branch)\\[\\e[m\\]\" # current branch PS1+=\" \" # space PS1+=\">> \" # end prompt export PS1; export CLICOLOR=1 export LSCOLORS=ExFxBxDxCxegedabagacad Relaunch you terminal and navigate to a git repo (i.e. this python-dev-setup repo). You will now see your terminal prompt formatted with your username, current folder and repo branch Mac: WSL:","title":"1. Run Scripts from Command Line"},{"location":"1-run_scripts_cmd_line/#mac","text":"Mac's Terminal app is ideal for this because Mac has a Linux based OS and most apps are deployed to Linux machines in Production due to their cost effectiveness.","title":"Mac"},{"location":"1-run_scripts_cmd_line/#windows","text":"Since Window's is not a Linux based OS, you can set up a Linux virtual environment with WSL.","title":"Windows"},{"location":"1-run_scripts_cmd_line/#set-up-a-wsl-environment","text":"WSL Article Reference NOTE: If you already have a legacy version of WSL installed (i.e. WSL1 instead of WSL2), uninstall it so you can follow the install steps below Run Windows PowerShell as an administrator and select yes to the prompt asking if you want to allow the app to make changes to your device Run the command wsl --install This will take a few minutes, but on successful complete, you should see the below output Restart your computer When you log back in, you will now see an Ubunutu terminal loaded Close out of the Ubuntu window, and open PowerShell Run the command wsl -l -v to list your installed Linux DIstributions and you should see something like the following NOTE: The star next to the Ubuntu-20.40 distribution means this is the default distribution that will be used when launching WSL To launch your default Linux distribution from PowerShell, simply run the command wsl","title":"Set Up a WSL Environment"},{"location":"1-run_scripts_cmd_line/#format-your-terminal","text":"No matter the command line interface (CLI) used, it helps to format your CLI to work well with Git so that you know what branch you are working on and don't accidentally commit code to the wrong branch. NOTE: Code below found in this Medium article Open your terminal of choice (i.e. Mac users default terminal/ Windows users WSL) Cd to your home directory cd ~ Create .bash_profile file if it doesn't already exist touch .bash_profile Open .bash_profile Mac: open .bash_profile WSL: vim .bash_profile Add this line to the bottom of the file source ~/.bash_prompt NOTE: In vim, type i to enter INSERT mode and then right click to paster the copied text. Press esc to exit INSERT mode. Type :wq and press enter to save and close the file. Create .bash_prompt file touch .bash_prompt Open .bash_prompt file Mac: open .bash_prompt Windows: notepad .bash_prompt Add these lines to your file #!/usr/bin/env bash # GIT FUNCTIONS git_branch() { git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \\\\(.*$ \\\\(.*\\\\)/ (\\\\1)/' } # TERMINAL PROMPT PS1=\"\\[\\e[0;93m\\]\\u\\[\\e[m\\]\" # username PS1+=\" \" # space PS1+=\"\\[\\e[0;95m\\]\\W\\[\\e[m\\]\" # current directory PS1+=\" \" # space PS1+=\"\\[\\e[0;92m\\]\\$(git_branch)\\[\\e[m\\]\" # current branch PS1+=\" \" # space PS1+=\">> \" # end prompt export PS1; export CLICOLOR=1 export LSCOLORS=ExFxBxDxCxegedabagacad Relaunch you terminal and navigate to a git repo (i.e. this python-dev-setup repo). You will now see your terminal prompt formatted with your username, current folder and repo branch Mac: WSL:","title":"Format Your Terminal"},{"location":"3-edit_with_vscode/","text":"Install \u00b6 Download Vscode Install the extensions below (optional): Python Extension ID: ms-python.python Python Environment Manager Extension ID: donjayamanne.python-environment-manager Jupyter Extension ID: ms-toolsai.jupyter Prettify JSON Extension ID: mohsen1.prettify-json JSON Viewer Extension ID: ccimage.jsonviewer Markdown Preview Enhanced Extension ID: shd101wyy.markdown-preview-enhanced Rainbow CSV Extension ID: mechatroner.rainbow-csv vscode-pdf Extension ID: tomoki1207.pdf Remote-SSH Extension ID: ms-vscode-remote.remote-ssh Remote-WSL (only if using Windows WSL) Extension ID: ms-vscode-remote.remote-wsl Use VSCode with WSL \u00b6 Once you install tyhe Remote-WSL, navigate to the Remote Explorer tab and connect to your WSL distribution Navigate to open a folder as you normally would Configure Remote-SSH Editing \u00b6 When project files are hosted on a Linux Machine, you can easily edit/ debug them as you would local files by taking advantage of VS Code's Remote-SSH extension. To use SSH to connect to a remote Linux machine: Open the Command Palette Mac: shift + cmd + P Windows: shift + ctrl + P Search for/ Select Remote-SSH: Add New SSH Host... Enter the ssh connection command ssh {username}@{ip} Select the ssh file to update You will see a pop-up in the bottom right corner that the host has been added In the Remote Explorer tab, you will now see your new SSH Target. Click the plus folder icon to \"Connect to Host in New Window\" A new window will open and you will be prompted to enter your password Choose the folder in the remote machine you want to open and select \"OK\" You will be prompted for your password one more time Upon successful connection, you will see the remote machine's ip as well as the git branch you are currently on (if opened to a git repo) in the bottom left corner You can now easily edit and debug your code as you would locally. However, there is one exception. If you are connecting to the remote machine with a normal user (i.e. non-root user) you will get access errors when trying to run a ipynb file. This happens because, in a Unix/Linux system, you can\u2019t bind to external facing ports without super user/root access. If you do not have an environment controlled with Puppet, you can try editing the user's permissions to not need password authentication when entering root user mode. However, it is easiest to just test small code snippets in a noteboook file locally. For more information, see https://code.visualstudio.com/docs/remote/ssh","title":"3. Edit and Debug Your Code"},{"location":"3-edit_with_vscode/#install","text":"Download Vscode Install the extensions below (optional): Python Extension ID: ms-python.python Python Environment Manager Extension ID: donjayamanne.python-environment-manager Jupyter Extension ID: ms-toolsai.jupyter Prettify JSON Extension ID: mohsen1.prettify-json JSON Viewer Extension ID: ccimage.jsonviewer Markdown Preview Enhanced Extension ID: shd101wyy.markdown-preview-enhanced Rainbow CSV Extension ID: mechatroner.rainbow-csv vscode-pdf Extension ID: tomoki1207.pdf Remote-SSH Extension ID: ms-vscode-remote.remote-ssh Remote-WSL (only if using Windows WSL) Extension ID: ms-vscode-remote.remote-wsl","title":"Install"},{"location":"3-edit_with_vscode/#use-vscode-with-wsl","text":"Once you install tyhe Remote-WSL, navigate to the Remote Explorer tab and connect to your WSL distribution Navigate to open a folder as you normally would","title":"Use VSCode with WSL"},{"location":"3-edit_with_vscode/#configure-remote-ssh-editing","text":"When project files are hosted on a Linux Machine, you can easily edit/ debug them as you would local files by taking advantage of VS Code's Remote-SSH extension. To use SSH to connect to a remote Linux machine: Open the Command Palette Mac: shift + cmd + P Windows: shift + ctrl + P Search for/ Select Remote-SSH: Add New SSH Host... Enter the ssh connection command ssh {username}@{ip} Select the ssh file to update You will see a pop-up in the bottom right corner that the host has been added In the Remote Explorer tab, you will now see your new SSH Target. Click the plus folder icon to \"Connect to Host in New Window\" A new window will open and you will be prompted to enter your password Choose the folder in the remote machine you want to open and select \"OK\" You will be prompted for your password one more time Upon successful connection, you will see the remote machine's ip as well as the git branch you are currently on (if opened to a git repo) in the bottom left corner You can now easily edit and debug your code as you would locally. However, there is one exception. If you are connecting to the remote machine with a normal user (i.e. non-root user) you will get access errors when trying to run a ipynb file. This happens because, in a Unix/Linux system, you can\u2019t bind to external facing ports without super user/root access. If you do not have an environment controlled with Puppet, you can try editing the user's permissions to not need password authentication when entering root user mode. However, it is easiest to just test small code snippets in a noteboook file locally. For more information, see https://code.visualstudio.com/docs/remote/ssh","title":"Configure Remote-SSH Editing"},{"location":"4-mambaforge_python_env/","text":"Install \u00b6 Mac \u00b6 Install wget brew install wget Install Mambaforge (Type \"yes\" wherever asked) wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge- $( uname ) - $( uname -m ) .sh\" bash Mambaforge- $( uname ) - $( uname -m ) .sh Windows WSL/ Linux \u00b6 Install wget sudo apt install wget Install Mambaforge (Type \"yes\" wherever asked) wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge- $( uname ) - $( uname -m ) .sh\" bash Mambaforge- $( uname ) - $( uname -m ) .sh source ~/.bashrc Useful Mambaforge Commands \u00b6 Create new conda python virtual environment Note: If it asks you to select y/n, enter \"y\" conda create -n { name } python ={ version } Activate conda environment conda activate { name } Deactivate conda environment source deactivate","title":"4. Manage Your Python Version"},{"location":"4-mambaforge_python_env/#install","text":"","title":"Install"},{"location":"4-mambaforge_python_env/#mac","text":"Install wget brew install wget Install Mambaforge (Type \"yes\" wherever asked) wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge- $( uname ) - $( uname -m ) .sh\" bash Mambaforge- $( uname ) - $( uname -m ) .sh","title":"Mac"},{"location":"4-mambaforge_python_env/#windows-wsl-linux","text":"Install wget sudo apt install wget Install Mambaforge (Type \"yes\" wherever asked) wget \"https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge- $( uname ) - $( uname -m ) .sh\" bash Mambaforge- $( uname ) - $( uname -m ) .sh source ~/.bashrc","title":"Windows WSL/ Linux"},{"location":"4-mambaforge_python_env/#useful-mambaforge-commands","text":"Create new conda python virtual environment Note: If it asks you to select y/n, enter \"y\" conda create -n { name } python ={ version } Activate conda environment conda activate { name } Deactivate conda environment source deactivate","title":"Useful Mambaforge Commands"},{"location":"5-poetry_package_manager/","text":"Install \u00b6 Install poetry with the following command: curl -sSL https://install.python-poetry.org | python3 - Restart your terminal Enter poetry and you should see a list of commands returned Specify Project Dependencies \u00b6 When you are first creating the project, you will use poetry init to interactively create the pyproject.toml file. For example, to create specify this project's dependencies, I followed the steps below: Create a conda environment with the same name as the project folder conda create -n python-dev-setup python=3.9 Run poetry init Press enter to accept the defaults until you get to the questions on defining dependencies interactivaly I find it easier to specificy the dependencies individually later vs. at this step. So, I enter no to both questions and then press enter to confirm generation. You will now see a pyproject.toml file created NOTE: If you are converting a project that currently uses a requirements.txt file, you can just fill in the template below instead of using poetry init: ``` [ tool . poetry ] name = \"{repo/project name}\" version = \"1.0.0\" description = \"{free text description}\" readme = \"README.md\" repository = \"{git repo link}\" documentation = \"{site url if applicable}\" authors = [ \"{full name} <{email}>\" ] [ tool . poetry . dependencies ] python = \"=={Python version}\" [ tool . poetry . dev - dependencies ] [ build - system ] requires = [ \"poetry-core>=1.0.0\" ] build - backend = \"poetry.core.masonry.api\" ``` Create poetry.lock file \u00b6 The first time you run poetry install or add a package with poetry add {package name} , the poetry.lock file is created After adding the dependencies needed with poetry add , push the pyproject.toml and poetry.lock files to the remote repo. Install Project Dependencies \u00b6 Now that the lock file is created, other team members can simply: Create a conda environment using python version 3.9 Run poetry install After these steps, they will be working with the same dependencies you are using! Useful Poetry Commands \u00b6 Install requirements \u00b6 poetry install Add a package \u00b6 This will install the latest package version. The pyproject.toml will show a version greater than or equal to the version is required and the poetry.lock file will update to specify the specific version installed. poetry add {package name} NOTE: If you need to install a version other than the latest version, you can specify poetry add {package name}=={version} Remove a package \u00b6 This will update the pyproject.toml and poetry.lock files poetry remove {package name} Convert poetry.lock file to requirements.txt \u00b6 poetry export -f requirements.txt -o requirements.txt --without-hashes","title":"5. Manage Your Python Package Versions"},{"location":"5-poetry_package_manager/#install","text":"Install poetry with the following command: curl -sSL https://install.python-poetry.org | python3 - Restart your terminal Enter poetry and you should see a list of commands returned","title":"Install"},{"location":"5-poetry_package_manager/#specify-project-dependencies","text":"When you are first creating the project, you will use poetry init to interactively create the pyproject.toml file. For example, to create specify this project's dependencies, I followed the steps below: Create a conda environment with the same name as the project folder conda create -n python-dev-setup python=3.9 Run poetry init Press enter to accept the defaults until you get to the questions on defining dependencies interactivaly I find it easier to specificy the dependencies individually later vs. at this step. So, I enter no to both questions and then press enter to confirm generation. You will now see a pyproject.toml file created NOTE: If you are converting a project that currently uses a requirements.txt file, you can just fill in the template below instead of using poetry init: ``` [ tool . poetry ] name = \"{repo/project name}\" version = \"1.0.0\" description = \"{free text description}\" readme = \"README.md\" repository = \"{git repo link}\" documentation = \"{site url if applicable}\" authors = [ \"{full name} <{email}>\" ] [ tool . poetry . dependencies ] python = \"=={Python version}\" [ tool . poetry . dev - dependencies ] [ build - system ] requires = [ \"poetry-core>=1.0.0\" ] build - backend = \"poetry.core.masonry.api\" ```","title":"Specify Project Dependencies"},{"location":"5-poetry_package_manager/#create-poetrylock-file","text":"The first time you run poetry install or add a package with poetry add {package name} , the poetry.lock file is created After adding the dependencies needed with poetry add , push the pyproject.toml and poetry.lock files to the remote repo.","title":"Create poetry.lock file"},{"location":"5-poetry_package_manager/#install-project-dependencies","text":"Now that the lock file is created, other team members can simply: Create a conda environment using python version 3.9 Run poetry install After these steps, they will be working with the same dependencies you are using!","title":"Install Project Dependencies"},{"location":"5-poetry_package_manager/#useful-poetry-commands","text":"","title":"Useful Poetry Commands"},{"location":"5-poetry_package_manager/#install-requirements","text":"poetry install","title":"Install requirements"},{"location":"5-poetry_package_manager/#add-a-package","text":"This will install the latest package version. The pyproject.toml will show a version greater than or equal to the version is required and the poetry.lock file will update to specify the specific version installed. poetry add {package name} NOTE: If you need to install a version other than the latest version, you can specify poetry add {package name}=={version}","title":"Add a package"},{"location":"5-poetry_package_manager/#remove-a-package","text":"This will update the pyproject.toml and poetry.lock files poetry remove {package name}","title":"Remove a package"},{"location":"5-poetry_package_manager/#convert-poetrylock-file-to-requirementstxt","text":"poetry export -f requirements.txt -o requirements.txt --without-hashes","title":"Convert poetry.lock file to requirements.txt"},{"location":"2-git_version_control/","text":"Install \u00b6 Mac \u00b6 Install Apple Xcode developer tools xcode-select --install Download Homebrew: https://brew.sh/ Homebrew helps you easily manage installs on a Mac from command-line Install git using homebrew brew install git Windows \u00b6 From PowerShell, open your Ubuntu Linux distribution with wsl and run the command apt install git NOTE: If you forgot your password (or were not prompted to set one upon initial WSL install), you can reset your password using the following steps: Exit the Linux distribution you are in with the command exit Re-enter the Linux distribution as the root user wsl -u root Enter the command passwd {your username} and type in the new password NOTE: your username is what you saw in the command prompt when you weren't at the root Exit the Linux Distribution with exit Red Hat Linux \u00b6 Switch to the super user (a.k.a root user) sudo su Enter your password Install git yum install git Switch back to a normal user exit Set Git Username and Email \u00b6 In order to commit/ push code to Git you must configure your username and email. git config --global user.name {your username} git config --global user.email {your email} Configure SSH Auth \u00b6 To easily authenticate with Github/ Bitbucket (i.e. not need to enter your username/ password every time you pull/push to the repo) you can set up SSH authentication. Setting up git authentication on a personal machine (i.e. one that only you will be using) is very simple. However, if multiple user may be using the machine (i.e. a Linux Machine shared by a development team) you will want to follow a few additional step so that commits can be distinguished by user. Personal Machine SSH Auth \u00b6 Create an SSH key pair with the command ssh-keygen and press enter to accept all the default Copy the content of the id_rsa.pub file using the cat {path to your file} command For example, cat ~/.ssh/id_rsa.pub See the Machine Type Agnostic Steps section for remaining steps Shared Machine SSH Auth \u00b6 Create an SSH key pair with the command ssh-keygen , adding your git profile to the end of the id_rsa file name instead of accepting all default For example: Users/jillvillany/.ssh/id_rsa_jillvillany Navigate to where the ssh key pair was created using the cd {path to ssh folder} command For example: cd Users/jillvillany/.ssh Create the config file touch config vim config NOTE: Git username vairable is case sensitive If using Github, add the below to your config file: Host github-{git username} HostName github.com IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes If using Github Enterprise (i.e. IBM), add the below to yuur config file: Host github-{git username} HostName github.ibm.com IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes If Bitbucket: Host bitbucket.org-{git username} HostName bitbucket.org User git IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes NOTE: If you have other users to add, create similar entries below in the file Copy the contents of the id_rsa_{git username}.pub file using the cat id_rsa_{git username}.pub command Machine Type Agnostic Steps \u00b6 Add SSH key in Github or Bitbucket In Github: Navigate to Settings > SSH and GPG keys Click New SSH key and add the contents of your id_rsa_{git username}.pub file in the key field In Bitbucket: Navigate to personal settings Select SSH Key > Add Key add the contents of your id_rsa_{git username}.pub file in the key field Add the SSH key to the SSH agent ssh-add ~/.ssh/id_rsa_{git username} NOTE: if you get an error about connecting to the ssh agent, you need to start the agent in the background with \"eval `ssh-agent`\" Test your SSH connection If on a personal machine: Github: ssh -T git@github.com Github Enterprise (i.e. IBM): ssh -T git@github.ibm.com Bitbucket: ssh -T git@bitbucket.org If on a shared machine: Github: ssh -T git@github-{your username} Github Enterprise (i.e. IBM): ssh -T git@github.ibm-{your username} Bitbucket: ssh -T git@bitbucket.org-{your username}","title":"Git Version Control"},{"location":"2-git_version_control/#install","text":"","title":"Install"},{"location":"2-git_version_control/#mac","text":"Install Apple Xcode developer tools xcode-select --install Download Homebrew: https://brew.sh/ Homebrew helps you easily manage installs on a Mac from command-line Install git using homebrew brew install git","title":"Mac"},{"location":"2-git_version_control/#windows","text":"From PowerShell, open your Ubuntu Linux distribution with wsl and run the command apt install git NOTE: If you forgot your password (or were not prompted to set one upon initial WSL install), you can reset your password using the following steps: Exit the Linux distribution you are in with the command exit Re-enter the Linux distribution as the root user wsl -u root Enter the command passwd {your username} and type in the new password NOTE: your username is what you saw in the command prompt when you weren't at the root Exit the Linux Distribution with exit","title":"Windows"},{"location":"2-git_version_control/#red-hat-linux","text":"Switch to the super user (a.k.a root user) sudo su Enter your password Install git yum install git Switch back to a normal user exit","title":"Red Hat Linux"},{"location":"2-git_version_control/#set-git-username-and-email","text":"In order to commit/ push code to Git you must configure your username and email. git config --global user.name {your username} git config --global user.email {your email}","title":"Set Git Username and Email"},{"location":"2-git_version_control/#configure-ssh-auth","text":"To easily authenticate with Github/ Bitbucket (i.e. not need to enter your username/ password every time you pull/push to the repo) you can set up SSH authentication. Setting up git authentication on a personal machine (i.e. one that only you will be using) is very simple. However, if multiple user may be using the machine (i.e. a Linux Machine shared by a development team) you will want to follow a few additional step so that commits can be distinguished by user.","title":"Configure SSH Auth"},{"location":"2-git_version_control/#personal-machine-ssh-auth","text":"Create an SSH key pair with the command ssh-keygen and press enter to accept all the default Copy the content of the id_rsa.pub file using the cat {path to your file} command For example, cat ~/.ssh/id_rsa.pub See the Machine Type Agnostic Steps section for remaining steps","title":"Personal Machine SSH Auth"},{"location":"2-git_version_control/#shared-machine-ssh-auth","text":"Create an SSH key pair with the command ssh-keygen , adding your git profile to the end of the id_rsa file name instead of accepting all default For example: Users/jillvillany/.ssh/id_rsa_jillvillany Navigate to where the ssh key pair was created using the cd {path to ssh folder} command For example: cd Users/jillvillany/.ssh Create the config file touch config vim config NOTE: Git username vairable is case sensitive If using Github, add the below to your config file: Host github-{git username} HostName github.com IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes If using Github Enterprise (i.e. IBM), add the below to yuur config file: Host github-{git username} HostName github.ibm.com IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes If Bitbucket: Host bitbucket.org-{git username} HostName bitbucket.org User git IdentityFile ~/.ssh/id_rsa_{git username} IdentitiesOnly yes NOTE: If you have other users to add, create similar entries below in the file Copy the contents of the id_rsa_{git username}.pub file using the cat id_rsa_{git username}.pub command","title":"Shared Machine SSH Auth"},{"location":"2-git_version_control/#machine-type-agnostic-steps","text":"Add SSH key in Github or Bitbucket In Github: Navigate to Settings > SSH and GPG keys Click New SSH key and add the contents of your id_rsa_{git username}.pub file in the key field In Bitbucket: Navigate to personal settings Select SSH Key > Add Key add the contents of your id_rsa_{git username}.pub file in the key field Add the SSH key to the SSH agent ssh-add ~/.ssh/id_rsa_{git username} NOTE: if you get an error about connecting to the ssh agent, you need to start the agent in the background with \"eval `ssh-agent`\" Test your SSH connection If on a personal machine: Github: ssh -T git@github.com Github Enterprise (i.e. IBM): ssh -T git@github.ibm.com Bitbucket: ssh -T git@bitbucket.org If on a shared machine: Github: ssh -T git@github-{your username} Github Enterprise (i.e. IBM): ssh -T git@github.ibm-{your username} Bitbucket: ssh -T git@bitbucket.org-{your username}","title":"Machine Type Agnostic Steps"},{"location":"2-git_version_control/archive_branch/","text":"# This script takes one input: # branch name # To archive a branch in this repo run: ./archive_branch.sh branch_name # capture the standard output of a command so it can be retrieved with ret cap () { tee /tmp/capture.out ; } # return the output of the most recent command that was captured by cap ret () { cat /tmp/capture.out ; } # checkout master to make sure not on the branch archiving git checkout main git pull # redirect error message to stdout so can be captured git tag archive/ $1 $1 2 >/tmp/capture.out | cap echo $( ret ) if [[ $( ret ) == * \"Failed to resolve\" * ]] ; then # try checking out the branch first git checkout $1 2 >/tmp/capture.out | cap echo $( ret ) if [[ $( ret ) == * \"did not match any file\" * ]] ; then echo \"ERROR REASON: $1 branch doesn't exist\" exit 0 fi git checkout master git tag archive/ $1 $1 2 >/tmp/capture.out | cap echo $( ret ) if [[ $( ret ) == * \"already exists\" * ]] ; then echo Tag already exists, specify new name: read newTag git tag archive/ $newTag $1 2 >/tmp/capture.out | cap echo $( ret ) if [[ $( ret ) == * \"already exists\" * ]] ; then echo ERROR REASON: New tag name already exists exit 0 fi fi elif [[ $( ret ) == * \"already exists\" * ]] ; then echo Tag already exists, specify new name: read newTag git tag archive/ $newTag $1 2 >/tmp/capture.out | cap echo $( ret ) if [[ $( ret ) == * \"already exists\" * ]] ; then echo ERROR REASON: New tag name already exists exit 0 fi else echo tag archive/ $1 created successfully fi git push origin --tags git branch -d $1 git push -d origin $1","title":"archive_branch.sh"},{"location":"2-git_version_control/git_dif_excel_workaround/","text":"Git does not natively support showing the differences in binary files such as Excel files. This causes a variety of problems including: Unsure if file actually edited - VS Code will usually mark the file modified once it is opened Unsure what changes were made To ease the inconvenience of this, you can make your own custom diff tool. Setup Steps \u00b6 Create \"excel_to_text_dump.py\" with the following code from io import StringIO import sys import pandas as pd for sheet_name in pd.ExcelFile(sys.argv[1]).sheet_names: output = StringIO() print('Sheet: %s' % sheet_name) pd.read_excel(sys.argv[1], sheet_name=sheet_name)\\ .to_csv(output, header=True, index=False) print(output.getvalue()) Add to .gitattributes file *.xlsx diff=excel *.xls diff=excel Update .git/config file This creates a filter to convert the file to text so that it can still be compared with git diff [diff \"excel\"] textconv = python {absolute path to file} NOTE: The .git folder is a hidden folder To view the folder in Mac Finder: shift + cmd + . To view the folder in VS Code: Go into VS Code's Preferences > Settings Search for files.exclude and remove the **/.git item Push .gitattributes and Excel file \u00b6 In order for the .gitattributes to take effect it must first at least be committed. Run git diff \u00b6 If there is no output, you know it is just because the file was open. For example: git diff git_dif_excel_demo.xlsx If there were changes,for example changing the text classification of a review in one row from \"positive\" to \"neutral\", the output will look like this: File before modifications: File after modifications: Git diff output Handle merge conflicts \u00b6 You can choose to use the version of the file on your active branch (--ours) or the branch you are merging in (--theirs) For example: git checkout --ours {path to file} git add {path to file}","title":"Git Diff Excel Workaround"},{"location":"2-git_version_control/git_dif_excel_workaround/#setup-steps","text":"Create \"excel_to_text_dump.py\" with the following code from io import StringIO import sys import pandas as pd for sheet_name in pd.ExcelFile(sys.argv[1]).sheet_names: output = StringIO() print('Sheet: %s' % sheet_name) pd.read_excel(sys.argv[1], sheet_name=sheet_name)\\ .to_csv(output, header=True, index=False) print(output.getvalue()) Add to .gitattributes file *.xlsx diff=excel *.xls diff=excel Update .git/config file This creates a filter to convert the file to text so that it can still be compared with git diff [diff \"excel\"] textconv = python {absolute path to file} NOTE: The .git folder is a hidden folder To view the folder in Mac Finder: shift + cmd + . To view the folder in VS Code: Go into VS Code's Preferences > Settings Search for files.exclude and remove the **/.git item","title":"Setup Steps"},{"location":"2-git_version_control/git_dif_excel_workaround/#push-gitattributes-and-excel-file","text":"In order for the .gitattributes to take effect it must first at least be committed.","title":"Push .gitattributes and Excel file"},{"location":"2-git_version_control/git_dif_excel_workaround/#run-git-diff","text":"If there is no output, you know it is just because the file was open. For example: git diff git_dif_excel_demo.xlsx If there were changes,for example changing the text classification of a review in one row from \"positive\" to \"neutral\", the output will look like this: File before modifications: File after modifications: Git diff output","title":"Run git diff"},{"location":"2-git_version_control/git_dif_excel_workaround/#handle-merge-conflicts","text":"You can choose to use the version of the file on your active branch (--ours) or the branch you are merging in (--theirs) For example: git checkout --ours {path to file} git add {path to file}","title":"Handle merge conflicts"},{"location":"2-git_version_control/git_lfs/","text":"Git LFS \u00b6 Git LFS is used to for large file storage. Download and install: Git Large File Storage Install Git LFS on Linux \u00b6 Navigate to https://github.com/git-lfs/git-lfs/releases Download the package .rpm file for your Linux Distribution Switch to root user sudo su Install the package rpm -iv {absolute path to .rpm file} Install git lfs git lfs install Fetch all git lfs files \u00b6 NOTE: Use this command if you installed Git LFS after cloning the repo git lfs fetch --all Track a file with git lfs \u00b6 This will add the file paths to the .gitattributes file NOTE: The .gitattibutes file must be committed before it takes effect git lfs track {path to file} See files currently tracked \u00b6 git lfs ls-files See lfs files committed or staged for commit \u00b6 git lfs status","title":"Git LFS"},{"location":"2-git_version_control/git_lfs/#git-lfs","text":"Git LFS is used to for large file storage. Download and install: Git Large File Storage","title":"Git LFS"},{"location":"2-git_version_control/git_lfs/#install-git-lfs-on-linux","text":"Navigate to https://github.com/git-lfs/git-lfs/releases Download the package .rpm file for your Linux Distribution Switch to root user sudo su Install the package rpm -iv {absolute path to .rpm file} Install git lfs git lfs install","title":"Install Git LFS on Linux"},{"location":"2-git_version_control/git_lfs/#fetch-all-git-lfs-files","text":"NOTE: Use this command if you installed Git LFS after cloning the repo git lfs fetch --all","title":"Fetch all git lfs files"},{"location":"2-git_version_control/git_lfs/#track-a-file-with-git-lfs","text":"This will add the file paths to the .gitattributes file NOTE: The .gitattibutes file must be committed before it takes effect git lfs track {path to file}","title":"Track a file with git lfs"},{"location":"2-git_version_control/git_lfs/#see-files-currently-tracked","text":"git lfs ls-files","title":"See files currently tracked"},{"location":"2-git_version_control/git_lfs/#see-lfs-files-committed-or-staged-for-commit","text":"git lfs status","title":"See lfs files committed or staged for commit"},{"location":"2-git_version_control/sync_git_branches/","text":"# return the output of the most recent command that was captured by cap ret () { cat /tmp/capture.out ; } # checkout source branch -> named master or main based on bitbucket/ github use # Use &> to capture both stdout and stderr git checkout master & > /tmp/capture.out switch_master_out = $( ret ) if [[ $switch_master_out == * \"error: pathspec 'master' did not match any file(s) known to git\" * ]] ; then source_branch = \"main\" else source_branch = \"master\" fi echo \"Using $source_branch for source branch name\" echo # error: pathspec 'master' did not match any file(s) known to git git pull # After fetching, remove any remote-tracking branches which no longer exist on the remote echo echo \"Removing any remote-tracking branches which no longer exist on the remote...\" git fetch --prune #### checkout and pull all the remote branches #### echo echo \"CHECKING LOCAL AND REMOTE BRANCHES SYNCED...\" git branch -r & > /tmp/capture.out # echo \"$(ret)\" remote_branches_string = $( ret ) IFS = $'\\n' read -rd '' -a remote_branches_array <<< \" $remote_branches_string \" # potential source branch names: head, main, master source_branch_regex = \"(\\s*(head|main|master)\\s*|.*(origin/head|origin/main|origin/master).*)\" echo for branch in \" ${ remote_branches_array [@] } \" do # NOTE: important to put the longer string on the left if ! [[ $branch = ~ $source_branch_regex ]] ; then # replace origin with empty str branch_name = $( echo $branch | sed 's/origin\\///' ) # split on space and take first element - for origin/head -> origin/master branch_name_array =( $branch_name ) branch_name = $( echo ${ branch_name_array [0] } ) echo \"BRANCH NAME: $branch_name \" git checkout $branch_name git pull fi done #### Clean up local branches that no longer have an upstream ref #### echo echo \"CHECKING IF LOCAL BRANCHES NEED CLEAN-UP...\" git checkout $source_branch git branch & > /tmp/capture.out # echo \"$(ret)\" local_branches_string = $( ret ) IFS = $'\\n' read -rd '' -a local_branches_array <<< \" $local_branches_string \" echo for branch in \" ${ local_branches_array [@] } \" do if ! [[ $branch = ~ $source_branch_regex ]] ; then echo \"BRANCH NAME: $branch \" git checkout $branch & > /tmp/capture.out branch_checkout_msg = $( ret ) echo $branch_checkout_msg if [[ $branch_checkout_msg == * \"the upstream is gone\" * ]] ; then git checkout $source_branch git branch -D $branch echo \"Deleted $branch \" fi git pull & > /tmp/capture.out branch_pull_msg = $( ret ) echo $branch_pull_msg if [[ $branch_pull_msg == * \"no such ref was fetched\" * ]] ; then git checkout $source_branch git branch -D $branch echo \"Deleted $branch \" elif [[ $branch_pull_msg == * \"There is no tracking information for the current branch\" * ]] ; then git checkout $source_branch git branch -D $branch echo \"Deleted $branch \" fi fi done","title":"sync_git_branches.sh"},{"location":"2-git_version_control/useful_git_commands/","text":"Get Repo \u00b6 Clone repo with SSH auth \u00b6 IMP NOTE: If you are an SSH config file so multiple git users can be on the same machine (i.e. as done in instructions above), you must modify the SSH URL git provides For example, in git@github.com:jillvillany/python-dev-setup.git replace \".com\" with \"-{username}\" -> git@github-jillvillany:jillvillany/python-dev-setup.git Select SSH when you clone the code and copy the URL Enter the command git clone {SSH URL} For example: git clone git@github.com:jillvillany/python-dev-setup.git Switch Repo to SSH auth \u00b6 Set the remote URL to the URL used with ssh git remote set-url origin {SSH URL} Now try git push Answer yes to the prompt and you will see git connects/ shows everything up to date without prompting for username/ password Maintain a Forked Repo \u00b6 To sync your forked version of the repo with the most updated version of the main repo: git checkout master If not already done: git remote add upstream {ssh url} git fetch upstream git rebase upstream/master git push -u origin File Changes \u00b6 Add new/ modified files \u00b6 git pull git add {relative file path} git commit -m \"commit message\" git push IMPORTANT: If multiple users are working in the directory, be sure to set the git config user.email before pushing so that commits belong to the user that made the change git config user.email {your email} Amend last commit message \u00b6 git commit --amend See text of unpushed commit \u00b6 git cherry -v Undo all local changes to the checked out branch \u00b6 git stash Undo local changes to a particular file \u00b6 git checkout --{file name} Branches \u00b6 Create & Publish a New Branch \u00b6 git checkout -b {branch name} {branch making new branch from} git push -u origin {branch name} Archive & Delete a Branch \u00b6 git tag archive/{branchname} {branchname} git push origin --tags git branch -d {branchname} git push -d origin {branch_name} NOTE: If need to delete a created tag git tag -d archive_branch.sh \u00b6 The process of archiving numerous branches can get tedious. See the archive_branch.sh script for an automated way to archive branches. Restore an archived branch \u00b6 git checkout -b {branch name} archive/{archived branch name} Merges \u00b6 Abort a merge \u00b6 git merge --abort Ours vs Theirs \u00b6 You can choose to use the version of the file on your active branch (--ours) or the branch you are merging in (--theirs) For example: git checkout --ours {path to file} git add {path to file} Undo \u00b6 Revert to a previous commit \u00b6 git revert {commit hash} - NOTE: See this stack overflow post for more details Revert specific file to previous commit \u00b6 Reference: https://ohshitgit.com/ # find a hash for a commit before the file was changed git log # use the arrow keys to scroll up and down in history # once you've found your commit, save the hash git checkout [saved hash] -- path/to/file # the old version of the file will be in your index git commit -m \"Wow, you don't have to copy-paste to undo\" Undo last commit - keep changes in staged \u00b6 git reset HEAD~ --soft Remove file added before last commit \u00b6 If you accidentally add a file with PII or a file that should be stored with git-lfs, this is super helpful! See the following Medium Article for context: Tutorial: Removing Large Files from Git Identify the commit before the mistake was made git log This will show you all the commits from the branch you are on with the latest first: Once you find the last good commit - in this case the \"git updates\" commit before the \"bad file\" was added - close out of the git log by typing wq Initiate a rebase between the last good commit and the current commit git rebase -i cffbcbcaf2d46a6c60e730c3f580646727bf9a57 IMPORTANT NOTE: You can abort a rebase at any time with git rebase --abort You will be brought into vim where all the commits after the last good commit (here the first 3 lines) are displayed. All the other stuff is just instructions. You want to edit the first commit with the bad file and pick (i.e. keep without changes) the other two. Type i to enter insert mode Delete pick and write edit Press esc to exit insert mode Type :wq to save You are now in a detached, temporary space Remove the file from git git rm --cached bad_file.xlsx Delete the file (or add it to git lfs files ). You need to do this becuase if you git status, you will see the file as an untracked file. NOTE: The steps for adding a file to git lfs are: git lfs track {path to file} This should update your .gitattributes file - run git status to check git add .gitattribtues git add {path to file} Now that you are done with the changes to the commit, amend the commit: git commit --amend Use vim to edit the text of the commit from \"bad file and formatting updates\" to \"formatting updates\" Type i to enter insert mode Press esc to exit insert mode Type :wq to close and save Once you save and close the commit amend, you will see the below: Continue the rebase (it will go until the next edit commit or complete if nothing left to edit). In our case, we have nothing else to edit, so the rebase completes successfully. git rebase --continue If you git log again, you will see that commit message is updated but the rest of the history looks the same Push your rebased branch to the remote git push --force Compare \u00b6 Compare your local branch to origin \u00b6 git diff origin/branch name","title":"Useful Git Commands"},{"location":"2-git_version_control/useful_git_commands/#get-repo","text":"","title":"Get Repo"},{"location":"2-git_version_control/useful_git_commands/#clone-repo-with-ssh-auth","text":"IMP NOTE: If you are an SSH config file so multiple git users can be on the same machine (i.e. as done in instructions above), you must modify the SSH URL git provides For example, in git@github.com:jillvillany/python-dev-setup.git replace \".com\" with \"-{username}\" -> git@github-jillvillany:jillvillany/python-dev-setup.git Select SSH when you clone the code and copy the URL Enter the command git clone {SSH URL} For example: git clone git@github.com:jillvillany/python-dev-setup.git","title":"Clone repo with SSH auth"},{"location":"2-git_version_control/useful_git_commands/#switch-repo-to-ssh-auth","text":"Set the remote URL to the URL used with ssh git remote set-url origin {SSH URL} Now try git push Answer yes to the prompt and you will see git connects/ shows everything up to date without prompting for username/ password","title":"Switch Repo to SSH auth"},{"location":"2-git_version_control/useful_git_commands/#maintain-a-forked-repo","text":"To sync your forked version of the repo with the most updated version of the main repo: git checkout master If not already done: git remote add upstream {ssh url} git fetch upstream git rebase upstream/master git push -u origin","title":"Maintain a Forked Repo"},{"location":"2-git_version_control/useful_git_commands/#file-changes","text":"","title":"File Changes"},{"location":"2-git_version_control/useful_git_commands/#add-new-modified-files","text":"git pull git add {relative file path} git commit -m \"commit message\" git push IMPORTANT: If multiple users are working in the directory, be sure to set the git config user.email before pushing so that commits belong to the user that made the change git config user.email {your email}","title":"Add new/ modified files"},{"location":"2-git_version_control/useful_git_commands/#amend-last-commit-message","text":"git commit --amend","title":"Amend last commit message"},{"location":"2-git_version_control/useful_git_commands/#see-text-of-unpushed-commit","text":"git cherry -v","title":"See text of unpushed commit"},{"location":"2-git_version_control/useful_git_commands/#undo-all-local-changes-to-the-checked-out-branch","text":"git stash","title":"Undo all local changes to the checked out branch"},{"location":"2-git_version_control/useful_git_commands/#undo-local-changes-to-a-particular-file","text":"git checkout --{file name}","title":"Undo local changes to a particular file"},{"location":"2-git_version_control/useful_git_commands/#branches","text":"","title":"Branches"},{"location":"2-git_version_control/useful_git_commands/#create-publish-a-new-branch","text":"git checkout -b {branch name} {branch making new branch from} git push -u origin {branch name}","title":"Create &amp; Publish a New Branch"},{"location":"2-git_version_control/useful_git_commands/#archive-delete-a-branch","text":"git tag archive/{branchname} {branchname} git push origin --tags git branch -d {branchname} git push -d origin {branch_name} NOTE: If need to delete a created tag git tag -d","title":"Archive &amp; Delete a Branch"},{"location":"2-git_version_control/useful_git_commands/#archive_branchsh","text":"The process of archiving numerous branches can get tedious. See the archive_branch.sh script for an automated way to archive branches.","title":"archive_branch.sh"},{"location":"2-git_version_control/useful_git_commands/#restore-an-archived-branch","text":"git checkout -b {branch name} archive/{archived branch name}","title":"Restore an archived branch"},{"location":"2-git_version_control/useful_git_commands/#merges","text":"","title":"Merges"},{"location":"2-git_version_control/useful_git_commands/#abort-a-merge","text":"git merge --abort","title":"Abort a merge"},{"location":"2-git_version_control/useful_git_commands/#ours-vs-theirs","text":"You can choose to use the version of the file on your active branch (--ours) or the branch you are merging in (--theirs) For example: git checkout --ours {path to file} git add {path to file}","title":"Ours vs Theirs"},{"location":"2-git_version_control/useful_git_commands/#undo","text":"","title":"Undo"},{"location":"2-git_version_control/useful_git_commands/#revert-to-a-previous-commit","text":"git revert {commit hash} - NOTE: See this stack overflow post for more details","title":"Revert to a previous commit"},{"location":"2-git_version_control/useful_git_commands/#revert-specific-file-to-previous-commit","text":"Reference: https://ohshitgit.com/ # find a hash for a commit before the file was changed git log # use the arrow keys to scroll up and down in history # once you've found your commit, save the hash git checkout [saved hash] -- path/to/file # the old version of the file will be in your index git commit -m \"Wow, you don't have to copy-paste to undo\"","title":"Revert specific file to previous commit"},{"location":"2-git_version_control/useful_git_commands/#undo-last-commit-keep-changes-in-staged","text":"git reset HEAD~ --soft","title":"Undo last commit - keep changes in staged"},{"location":"2-git_version_control/useful_git_commands/#remove-file-added-before-last-commit","text":"If you accidentally add a file with PII or a file that should be stored with git-lfs, this is super helpful! See the following Medium Article for context: Tutorial: Removing Large Files from Git Identify the commit before the mistake was made git log This will show you all the commits from the branch you are on with the latest first: Once you find the last good commit - in this case the \"git updates\" commit before the \"bad file\" was added - close out of the git log by typing wq Initiate a rebase between the last good commit and the current commit git rebase -i cffbcbcaf2d46a6c60e730c3f580646727bf9a57 IMPORTANT NOTE: You can abort a rebase at any time with git rebase --abort You will be brought into vim where all the commits after the last good commit (here the first 3 lines) are displayed. All the other stuff is just instructions. You want to edit the first commit with the bad file and pick (i.e. keep without changes) the other two. Type i to enter insert mode Delete pick and write edit Press esc to exit insert mode Type :wq to save You are now in a detached, temporary space Remove the file from git git rm --cached bad_file.xlsx Delete the file (or add it to git lfs files ). You need to do this becuase if you git status, you will see the file as an untracked file. NOTE: The steps for adding a file to git lfs are: git lfs track {path to file} This should update your .gitattributes file - run git status to check git add .gitattribtues git add {path to file} Now that you are done with the changes to the commit, amend the commit: git commit --amend Use vim to edit the text of the commit from \"bad file and formatting updates\" to \"formatting updates\" Type i to enter insert mode Press esc to exit insert mode Type :wq to close and save Once you save and close the commit amend, you will see the below: Continue the rebase (it will go until the next edit commit or complete if nothing left to edit). In our case, we have nothing else to edit, so the rebase completes successfully. git rebase --continue If you git log again, you will see that commit message is updated but the rest of the history looks the same Push your rebased branch to the remote git push --force","title":"Remove file added before last commit"},{"location":"2-git_version_control/useful_git_commands/#compare","text":"","title":"Compare"},{"location":"2-git_version_control/useful_git_commands/#compare-your-local-branch-to-origin","text":"git diff origin/branch name","title":"Compare your local branch to origin"}]}